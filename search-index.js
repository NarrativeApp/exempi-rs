var searchIndex = {};
searchIndex["exempi"] = {"doc":"","items":[[4,"FileType","exempi","Public file formats.",null,null],[13,"PDF","","",0,null],[13,"PS","","",0,null],[13,"EPS","","",0,null],[13,"JPEG","","",0,null],[13,"JPEG2K","","",0,null],[13,"TIFF","","",0,null],[13,"GIF","","",0,null],[13,"PNG","","",0,null],[13,"WEBP","","",0,null],[13,"SWF","","",0,null],[13,"FLA","","",0,null],[13,"FLV","","",0,null],[13,"MOV","","",0,null],[13,"AVI","","",0,null],[13,"CIN","","",0,null],[13,"WAV","","",0,null],[13,"MP3","","",0,null],[13,"SES","","",0,null],[13,"CEL","","",0,null],[13,"MPEG","","",0,null],[13,"MPEG2","","",0,null],[13,"MPEG4","","",0,null],[13,"WMAV","","",0,null],[13,"AIFF","","",0,null],[13,"HTML","","",0,null],[13,"XML","","",0,null],[13,"TEXT","","",0,null],[13,"Photoshop","","",0,null],[13,"Illustrator","","",0,null],[13,"InDesign","","",0,null],[13,"AEProject","","",0,null],[13,"AEProjTemplate","","",0,null],[13,"AEFilterPreset","","",0,null],[13,"EncoreProject","","",0,null],[13,"PremiereProject","","",0,null],[13,"PremiereTitle","","",0,null],[13,"UCFFile","","",0,null],[13,"Unknown","","",0,null],[4,"Error","","XMP errors.",null,null],[13,"Unknown","","Generic unknown error.",1,null],[13,"TBD","","Generic undefined error.",1,null],[13,"Unavailable","","Generic unavailable error.",1,null],[13,"BadObject","","Generic bad object error.",1,null],[13,"BadParam","","Generic bad parameter error.",1,null],[13,"BadValue","","Generic bad value error.",1,null],[13,"AssertFailure","","Generic assertion failure.",1,null],[13,"EnforceFailure","","Generic enforcement failure.",1,null],[13,"Unimplemented","","Generic unimplemented error.",1,null],[13,"InternalFailure","","Generic internal failure.",1,null],[13,"Deprecated","","Generic deprecated error.",1,null],[13,"ExternalFailure","","Generic external failure.",1,null],[13,"UserAbort","","Generic user abort error.",1,null],[13,"StdException","","Generic standard exception.",1,null],[13,"UnknownException","","Generic unknown exception.",1,null],[13,"NoMemory","","Generic out-of-memory error.",1,null],[13,"BadSchema","","Bad schema parameter.",1,null],[13,"BadXPath","","Bad XPath parameter.",1,null],[13,"BadOptions","","Bad options parameter.",1,null],[13,"BadIndex","","Bad index parameter.",1,null],[13,"BadIterPosition","","Bad iteration position.",1,null],[13,"BadParse","","XML parsing error.",1,null],[13,"BadSerialize","","Serialization error.",1,null],[13,"BadFileFormat","","File format error.",1,null],[13,"NoFileHandler","","No file handler found for format.",1,null],[13,"TooLargeForJPEG","","Data too large for JPEG file format.",1,null],[13,"BadXML","","XML format error.",1,null],[13,"BadRDF","","RDF format error.",1,null],[13,"BadXMP","","XMP format error.",1,null],[13,"EmptyIterator","","Empty iterator.",1,null],[13,"BadUnicode","","Unicode error.",1,null],[13,"BadTIFF","","TIFF format error.",1,null],[13,"BadJPEG","","JPEG format error.",1,null],[13,"BadPSD","","PSD format error.",1,null],[13,"BadPSIR","","PSIR format error.",1,null],[13,"BadIPTC","","IPTC format error.",1,null],[13,"BadMPEG","","MPEG format error.",1,null],[3,"Xmp","","",null,null],[3,"XmpFile","","",null,null],[3,"XmpString","","The string wrapper from Exempi. It is meant to be used for output parameter.\nBut gives you ownership of the string.\nBecause of the way the C API of Exempi is implemented, we provide\nthis type instead of using std::string::String to avoid copying of strings\nuntil needed.\nThey are mostly returned in an Option&lt;XmpString&gt; enum.\nXmpString support several of the standard traits.",null,null],[3,"XmpIterator","","",null,null],[3,"OpenFlags","","Flag options for opening files.",null,null],[3,"CloseFlags","","Flag options to close files.",null,null],[3,"FormatOptionFlags","","Result flage for file / format infos.",null,null],[3,"PropFlags","","",null,null],[3,"ArrayFlags","","",null,null],[3,"ItemFlags","","",null,null],[3,"SerialFlags","","",null,null],[3,"IterFlags","","",null,null],[3,"IterSkipFlags","","",null,null],[3,"DateTime","","A wrapper around the C type DateTime",null,null],[5,"init","","Initialize the library",null,{"inputs":[],"output":{"name":"bool"}}],[5,"terminate","","Terminate the library",null,{"inputs":[],"output":null}],[5,"get_error","","Get the last error code on the thread\nSet when a function return false or None.",null,{"inputs":[],"output":{"name":"error"}}],[5,"register_namespace","","Register namespace with uri and suggested prefix\nReturns the actual registered prefix.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[5,"namespace_prefix","","Return the prefix for the namespace uri.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"prefix_namespace","","Return the namespace uri for the prefix.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"cmp","","",2,null],[11,"hash","","",2,null],[11,"fmt","","",2,null],[11,"empty","","Returns an empty set of flags.",2,{"inputs":[],"output":{"name":"propflags"}}],[11,"all","","Returns the set containing all flags.",2,{"inputs":[],"output":{"name":"propflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",2,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",2,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",2,{"inputs":[{"name":"u32"}],"output":{"name":"propflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",2,null],[11,"is_all","","Returns `true` if all flags are currently set.",2,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",2,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",2,null],[11,"insert","","Inserts the specified flags in-place.",2,null],[11,"remove","","Removes the specified flags in-place.",2,null],[11,"toggle","","Toggles the specified flags in-place.",2,null],[11,"bitor","","Returns the union of the two sets of flags.",2,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",2,null],[11,"bitand","","Returns the intersection between the two sets of flags.",2,null],[11,"sub","","Returns the set difference of the two sets of flags.",2,null],[11,"not","","Returns the complement of this set of flags.",2,null],[11,"from_iter","","",2,{"inputs":[{"name":"t"}],"output":{"name":"propflags"}}],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",3,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"gt","","",3,null],[11,"ge","","",3,null],[11,"cmp","","",3,null],[11,"hash","","",3,null],[11,"fmt","","",3,null],[11,"empty","","Returns an empty set of flags.",3,{"inputs":[],"output":{"name":"arrayflags"}}],[11,"all","","Returns the set containing all flags.",3,{"inputs":[],"output":{"name":"arrayflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",3,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",3,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",3,{"inputs":[{"name":"u32"}],"output":{"name":"arrayflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",3,null],[11,"is_all","","Returns `true` if all flags are currently set.",3,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",3,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",3,null],[11,"insert","","Inserts the specified flags in-place.",3,null],[11,"remove","","Removes the specified flags in-place.",3,null],[11,"toggle","","Toggles the specified flags in-place.",3,null],[11,"bitor","","Returns the union of the two sets of flags.",3,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",3,null],[11,"bitand","","Returns the intersection between the two sets of flags.",3,null],[11,"sub","","Returns the set difference of the two sets of flags.",3,null],[11,"not","","Returns the complement of this set of flags.",3,null],[11,"from_iter","","",3,{"inputs":[{"name":"t"}],"output":{"name":"arrayflags"}}],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"cmp","","",4,null],[11,"hash","","",4,null],[11,"fmt","","",4,null],[11,"empty","","Returns an empty set of flags.",4,{"inputs":[],"output":{"name":"itemflags"}}],[11,"all","","Returns the set containing all flags.",4,{"inputs":[],"output":{"name":"itemflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",4,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",4,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",4,{"inputs":[{"name":"u32"}],"output":{"name":"itemflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",4,null],[11,"is_all","","Returns `true` if all flags are currently set.",4,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",4,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",4,null],[11,"insert","","Inserts the specified flags in-place.",4,null],[11,"remove","","Removes the specified flags in-place.",4,null],[11,"toggle","","Toggles the specified flags in-place.",4,null],[11,"bitor","","Returns the union of the two sets of flags.",4,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",4,null],[11,"bitand","","Returns the intersection between the two sets of flags.",4,null],[11,"sub","","Returns the set difference of the two sets of flags.",4,null],[11,"not","","Returns the complement of this set of flags.",4,null],[11,"from_iter","","",4,{"inputs":[{"name":"t"}],"output":{"name":"itemflags"}}],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"hash","","",5,null],[11,"fmt","","",5,null],[11,"empty","","Returns an empty set of flags.",5,{"inputs":[],"output":{"name":"serialflags"}}],[11,"all","","Returns the set containing all flags.",5,{"inputs":[],"output":{"name":"serialflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",5,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",5,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",5,{"inputs":[{"name":"u32"}],"output":{"name":"serialflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",5,null],[11,"is_all","","Returns `true` if all flags are currently set.",5,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",5,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",5,null],[11,"insert","","Inserts the specified flags in-place.",5,null],[11,"remove","","Removes the specified flags in-place.",5,null],[11,"toggle","","Toggles the specified flags in-place.",5,null],[11,"bitor","","Returns the union of the two sets of flags.",5,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",5,null],[11,"bitand","","Returns the intersection between the two sets of flags.",5,null],[11,"sub","","Returns the set difference of the two sets of flags.",5,null],[11,"not","","Returns the complement of this set of flags.",5,null],[11,"from_iter","","",5,{"inputs":[{"name":"t"}],"output":{"name":"serialflags"}}],[11,"from","","Construct from a native ptr. Will own it.",6,null],[11,"new","","New Xmp object",6,{"inputs":[],"output":{"name":"xmp"}}],[11,"from_buffer","","New Xmp object a byte buffer.\nReturn None if parsing failed.",6,null],[11,"parse","","Parse buff into a Xmp",6,null],[11,"serialize","","Serialize the Xmp to an XmpString.",6,null],[11,"serialize_and_format","","Serialize the Xmp to an XmpString with some formatting options.",6,null],[11,"get_property","","Get property as a XmpString.",6,null],[11,"get_property_date","","Get DateTime property.",6,null],[11,"get_property_float","","Get float property",6,null],[11,"get_property_bool","","Get bool property",6,null],[11,"get_property_i32","","Get i32 property",6,null],[11,"get_property_i64","","Get i64 property",6,null],[11,"get_array_item","","Get array item property",6,null],[11,"set_property","","Set a string property value",6,null],[11,"set_property_date","","Set a date property value",6,null],[11,"set_property_float","","Set a float property value",6,null],[11,"set_property_bool","","Set a bool property value",6,null],[11,"set_property_i32","","Set an i32 property value",6,null],[11,"set_property_i64","","Set an i64 property value",6,null],[11,"append_array_item","","Append an array item.",6,null],[11,"delete_property","","Delete a property",6,null],[11,"has_property","","Has a property",6,null],[11,"get_localized_text","","Get localized text.",6,null],[11,"set_localized_text","","Set localized text.",6,null],[11,"delete_localized_text","","Delete localize text.",6,null],[11,"is_null","","Return if the native pointer is null.",6,null],[11,"as_ptr","","Return the native pointer.",6,null],[11,"as_mut_ptr","","Return the mutable native pointer.",6,null],[11,"clone","","",6,null],[11,"drop","","Will release the Xmp native pointer on Drop.",6,null],[11,"new","","Create a new XmpString",7,{"inputs":[],"output":{"name":"xmpstring"}}],[11,"is_null","","Native pointer is NULL",7,null],[11,"as_ptr","","Return the native pointer",7,null],[11,"as_mut_ptr","","Return the mutable native pointer",7,null],[11,"len","","Return the length of the string",7,null],[11,"to_str","","Convert to a str",7,null],[11,"drop","","Will deallocate properly the underlying object",7,null],[11,"eq","","",7,null],[11,"fmt","","",7,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"clone","","",8,null],[11,"partial_cmp","","",8,null],[11,"lt","","",8,null],[11,"le","","",8,null],[11,"gt","","",8,null],[11,"ge","","",8,null],[11,"cmp","","",8,null],[11,"hash","","",8,null],[11,"fmt","","",8,null],[11,"empty","","Returns an empty set of flags.",8,{"inputs":[],"output":{"name":"openflags"}}],[11,"all","","Returns the set containing all flags.",8,{"inputs":[],"output":{"name":"openflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",8,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",8,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",8,{"inputs":[{"name":"u32"}],"output":{"name":"openflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",8,null],[11,"is_all","","Returns `true` if all flags are currently set.",8,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",8,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",8,null],[11,"insert","","Inserts the specified flags in-place.",8,null],[11,"remove","","Removes the specified flags in-place.",8,null],[11,"toggle","","Toggles the specified flags in-place.",8,null],[11,"bitor","","Returns the union of the two sets of flags.",8,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",8,null],[11,"bitand","","Returns the intersection between the two sets of flags.",8,null],[11,"sub","","Returns the set difference of the two sets of flags.",8,null],[11,"not","","Returns the complement of this set of flags.",8,null],[11,"from_iter","","",8,{"inputs":[{"name":"t"}],"output":{"name":"openflags"}}],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"clone","","",9,null],[11,"partial_cmp","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"gt","","",9,null],[11,"ge","","",9,null],[11,"cmp","","",9,null],[11,"hash","","",9,null],[11,"fmt","","",9,null],[11,"empty","","Returns an empty set of flags.",9,{"inputs":[],"output":{"name":"closeflags"}}],[11,"all","","Returns the set containing all flags.",9,{"inputs":[],"output":{"name":"closeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",9,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",9,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",9,{"inputs":[{"name":"u32"}],"output":{"name":"closeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",9,null],[11,"is_all","","Returns `true` if all flags are currently set.",9,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9,null],[11,"insert","","Inserts the specified flags in-place.",9,null],[11,"remove","","Removes the specified flags in-place.",9,null],[11,"toggle","","Toggles the specified flags in-place.",9,null],[11,"bitor","","Returns the union of the two sets of flags.",9,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9,null],[11,"bitand","","Returns the intersection between the two sets of flags.",9,null],[11,"sub","","Returns the set difference of the two sets of flags.",9,null],[11,"not","","Returns the complement of this set of flags.",9,null],[11,"from_iter","","",9,{"inputs":[{"name":"t"}],"output":{"name":"closeflags"}}],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"partial_cmp","","",10,null],[11,"lt","","",10,null],[11,"le","","",10,null],[11,"gt","","",10,null],[11,"ge","","",10,null],[11,"cmp","","",10,null],[11,"hash","","",10,null],[11,"fmt","","",10,null],[11,"empty","","Returns an empty set of flags.",10,{"inputs":[],"output":{"name":"formatoptionflags"}}],[11,"all","","Returns the set containing all flags.",10,{"inputs":[],"output":{"name":"formatoptionflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",10,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",10,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",10,{"inputs":[{"name":"u32"}],"output":{"name":"formatoptionflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",10,null],[11,"is_all","","Returns `true` if all flags are currently set.",10,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",10,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",10,null],[11,"insert","","Inserts the specified flags in-place.",10,null],[11,"remove","","Removes the specified flags in-place.",10,null],[11,"toggle","","Toggles the specified flags in-place.",10,null],[11,"bitor","","Returns the union of the two sets of flags.",10,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",10,null],[11,"bitand","","Returns the intersection between the two sets of flags.",10,null],[11,"sub","","Returns the set difference of the two sets of flags.",10,null],[11,"not","","Returns the complement of this set of flags.",10,null],[11,"from_iter","","",10,{"inputs":[{"name":"t"}],"output":{"name":"formatoptionflags"}}],[11,"new","","Create new XmpFile",11,{"inputs":[],"output":{"name":"xmpfile"}}],[11,"open_new","","Create and open a new XmpFile\nEquivalent to calling new then open.\nReturn None in case of failure",11,{"inputs":[{"name":"str"},{"name":"openflags"}],"output":{"name":"option"}}],[11,"open","","Open an XmpFile. Usually called after new.",11,null],[11,"close","","Close the XmpFile",11,null],[11,"is_null","","Return true if native pointer is null",11,null],[11,"get_new_xmp","","Get a new Xmp fronm the currently open file",11,null],[11,"get_xmp","","Get the xmp data an Xmp.",11,null],[11,"get_xmp_xmpstring","","Get the xmp packet as a string.",11,null],[11,"can_put_xmp","","Return true if it can put the Xmp into the XmpFile.",11,null],[11,"can_put_xmp_xmpstring","","Return true if it can put the XmpString packet into the XmpFile.",11,null],[11,"can_put_xmp_str","","Return true if it can put the XmpString packet into the XmpFile.",11,null],[11,"put_xmp","","Put the Xmp into the XmpFile",11,null],[11,"get_file_info","","Get info from the XmpFile.",11,null],[11,"check_file_format","","Check the file format for the specified path",11,{"inputs":[{"name":"str"}],"output":{"name":"filetype"}}],[11,"get_format_info","","Get FormatOptions for the FileType",11,{"inputs":[{"name":"filetype"},{"name":"formatoptionflags"}],"output":{"name":"bool"}}],[11,"drop","","Drop the XmpFile.",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"partial_cmp","","",12,null],[11,"lt","","",12,null],[11,"le","","",12,null],[11,"gt","","",12,null],[11,"ge","","",12,null],[11,"cmp","","",12,null],[11,"hash","","",12,null],[11,"fmt","","",12,null],[11,"empty","","Returns an empty set of flags.",12,{"inputs":[],"output":{"name":"iterflags"}}],[11,"all","","Returns the set containing all flags.",12,{"inputs":[],"output":{"name":"iterflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",12,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",12,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",12,{"inputs":[{"name":"u32"}],"output":{"name":"iterflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,null],[11,"is_all","","Returns `true` if all flags are currently set.",12,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",12,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",12,null],[11,"insert","","Inserts the specified flags in-place.",12,null],[11,"remove","","Removes the specified flags in-place.",12,null],[11,"toggle","","Toggles the specified flags in-place.",12,null],[11,"bitor","","Returns the union of the two sets of flags.",12,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",12,null],[11,"bitand","","Returns the intersection between the two sets of flags.",12,null],[11,"sub","","Returns the set difference of the two sets of flags.",12,null],[11,"not","","Returns the complement of this set of flags.",12,null],[11,"from_iter","","",12,{"inputs":[{"name":"t"}],"output":{"name":"iterflags"}}],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"partial_cmp","","",13,null],[11,"lt","","",13,null],[11,"le","","",13,null],[11,"gt","","",13,null],[11,"ge","","",13,null],[11,"cmp","","",13,null],[11,"hash","","",13,null],[11,"fmt","","",13,null],[11,"empty","","Returns an empty set of flags.",13,{"inputs":[],"output":{"name":"iterskipflags"}}],[11,"all","","Returns the set containing all flags.",13,{"inputs":[],"output":{"name":"iterskipflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",13,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",13,{"inputs":[{"name":"u32"}],"output":{"name":"iterskipflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",13,null],[11,"is_all","","Returns `true` if all flags are currently set.",13,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",13,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",13,null],[11,"insert","","Inserts the specified flags in-place.",13,null],[11,"remove","","Removes the specified flags in-place.",13,null],[11,"toggle","","Toggles the specified flags in-place.",13,null],[11,"bitor","","Returns the union of the two sets of flags.",13,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",13,null],[11,"bitand","","Returns the intersection between the two sets of flags.",13,null],[11,"sub","","Returns the set difference of the two sets of flags.",13,null],[11,"not","","Returns the complement of this set of flags.",13,null],[11,"from_iter","","",13,{"inputs":[{"name":"t"}],"output":{"name":"iterskipflags"}}],[11,"new","","Construct a new `XmpIterator` from a native pointer",14,{"inputs":[],"output":{"name":"xmpiterator"}}],[11,"is_null","","Whether native pointer is null",14,null],[11,"as_ptr","","Return native pointer.",14,null],[11,"next","","Iterate to the next element following the option bitset from `IterBits`",14,null],[11,"skip","","Skip the poperties following the option bitset from `IterSkipBits`",14,null],[11,"drop","","",14,null],[17,"OPEN_NONE","","No open option",null,null],[17,"OPEN_READ","","Open for read-only access.",null,null],[17,"OPEN_FOR_UPDATE","","Open for reading and writing.",null,null],[17,"OPEN_ONLY_XMP","","Only the XMP is wanted, allows space/time optimizations.",null,null],[17,"OPEN_CACHE_TNAIL","","Cache thumbnail if possible, GetThumbnail will be called.",null,null],[17,"OPEN_STRICTLY","","Be strict about locating XMP and reconciling with other forms.",null,null],[17,"OPEN_USE_SMART_HANDLER","","Require the use of a smart handler.",null,null],[17,"OPEN_USE_PACKET_SCANNING","","Force packet scanning, don&#39;t use a smart handler.",null,null],[17,"OPEN_LIMITED_SCANNING","","Only packet scan files &quot;known&quot; to need scanning.",null,null],[17,"OPEN_REPAIR_FILE","","Attempt to repair a file opened for update, default is to not open (throw an exception).",null,null],[17,"OPEN_OPTIMIZE_FILE_LAYOUT","","Optimize MPEG4 to support stream when updating This can take some time",null,null],[17,"OPEN_IN_BACKGROUND","","Set if calling from background thread.",null,null],[17,"CLOSE_NONE","","No close option",null,null],[17,"CLOSE_SAFE_UPDATE","","Write into a temporary file and swap for crash safety.",null,null],[17,"FORMAT_NONE","","",null,null],[17,"FORMAT_CAN_INJECT_XMP","","Can inject first-time XMP into an existing file.",null,null],[17,"FORMAT_CAN_EXPAND","","Can expand XMP or other metadata in an existing file.",null,null],[17,"FORMAT_CAN_REWRITE","","Can copy one file to another, writing new metadata.",null,null],[17,"FORMAT_PREFERS_IN_PLACE","","Can expand, but prefers in-place update.",null,null],[17,"FORMAT_CAN_RECONCILE","","Supports reconciliation between XMP and other forms.",null,null],[17,"FORMAT_ALLOWS_ONLY_XMP","","Allows access to just the XMP, ignoring other forms.",null,null],[17,"FORMAT_RETURNS_RAW_PACKET","","File handler returns raw XMP packet information.",null,null],[17,"FORMAT_HANDLER_OWNS_FILE","","The file handler does the file open and close.",null,null],[17,"FORMAT_ALLOW_SAFE_UPDATE","","The file handler allows crash-safe file updates.",null,null],[17,"FORMAT_NEEDS_READONLY_PACKET","","The file format needs the XMP packet to be read-only.",null,null],[17,"FORMAT_USE_SIDECAR_XMP","","The file handler uses a &quot;sidecar&quot; file for the XMP.",null,null],[17,"FORMAT_FOLDER_BASED_FORMAT","","The format is folder oriented, for example the P2 video format.",null,null],[17,"PROP_NONE","","The property has no bit set.",null,null],[17,"PROP_VALUE_IS_URI","","The value is a URI, use rdf:resource attribute. DISCOURAGED",null,null],[17,"PROP_HAS_QUALIFIERS","","Options relating to qualifiers attached to a property.\nThe property has qualifiers, includes rdf:type and xml:lang.",null,null],[17,"PROP_IS_QUALIFIER","","This is a qualifier, includes rdf:type and xml:lang.",null,null],[17,"PROP_HAS_LANG","","Implies XMP_PropHasQualifiers, property has xml:lang.",null,null],[17,"PROP_HAS_TYPE","","Implies XMP_PropHasQualifiers, property has rdf:type.",null,null],[17,"PROP_VALUE_IS_STRUCT","","The value is a structure with nested fields.",null,null],[17,"PROP_VALUE_IS_ARRAY","","The value is an array (RDF alt/bag/seq).",null,null],[17,"PROP_ARRAY_IS_UNORDERED","","The item order does not matter.*/",null,null],[17,"PROP_ARRAY_IS_ORDERED","","Implies XMP_PropValueIsArray, item order matters.",null,null],[17,"PROP_ARRAY_IS_ALT","","Implies XMP_PropArrayIsOrdered, items are alternates.",null,null],[17,"PROP_ARRAY_IS_ALTTEXT","","Additional struct and array options.\nImplies kXMP_PropArrayIsAlternate, items are localized text.",null,null],[17,"PROP_ARRAY_INSERT_BEFORE","","Used by array functions.",null,null],[17,"PROP_ARRAY_INSERT_AFTER","","Used by array functions. */",null,null],[17,"PROP_IS_ALIAS","","This property is an alias name for another property.",null,null],[17,"PROP_HAS_ALIASES","","This property is the base value for a set of aliases.",null,null],[17,"PROP_IS_INTERNAL","","This property is an &quot;internal&quot; property, owned by applications.",null,null],[17,"PROP_IS_STABLE","","This property is not derived from the document content.",null,null],[17,"PROP_IS_DERIVED","","This property is derived from the document content.",null,null],[17,"PROP_ARRAY_FORM_MASK","","",null,null],[17,"PROP_COMPOSITE_MASK","","Is it simple or composite (array or struct)?",null,null],[17,"IMPL_RESERVED_MASK","","Reserved for transient use by the implementation.",null,null],[17,"ARRAY_NONE","","Default value, no option.",null,null],[17,"ARRAY_IS_ORDERED","","Array is a ordered.",null,null],[17,"ARRAY_IS_ALT","","Array is alternate values",null,null],[17,"ARRAY_IS_ALTTEXT","","Array is alternate text.",null,null],[17,"ITEM_NONE","","",null,null],[17,"ITEM_IS_STRUCT","","The value is a structure with nested fields.",null,null],[17,"ITEM_IS_ARRAY","","The value is an array (RDF alt/bag/seq).",null,null],[17,"SERIAL_OMITPACKETWRAPPER","","Omit the XML packet wrapper. */",null,null],[17,"SERIAL_READONLYPACKET","","Default is a writeable packet. */",null,null],[17,"SERIAL_USECOMPACTFORMAT","","Use a compact form of RDF. */",null,null],[17,"SERIAL_INCLUDETHUMBNAILPAD","","Include a padding allowance for a thumbnail image. */",null,null],[17,"SERIAL_EXACTPACKETLENGTH","","The padding parameter is the overall packet length. */",null,null],[17,"SERIAL_WRITEALIASCOMMENTS","","Show aliases as XML comments. */",null,null],[17,"SERIAL_OMITALLFORMATTING","","Omit all formatting whitespace. */",null,null],[17,"_LITTLEENDIAN_BIT","","",null,null],[17,"_UTF16_BIT","","",null,null],[17,"_UTF32_BIT","","",null,null],[17,"SERIAL_ENCODINGMASK","","",null,null],[17,"SERIAL_ENCODEUTF8","","Serialize to UTF-8 (default)",null,null],[17,"SERIAL_ENCODEUTF16BIG","","Serialize to UTF-16 BE (big endian)",null,null],[17,"SERIAL_ENCODEUTF16LITTLE","","Serialize to UTF-16 LE (little endian)",null,null],[17,"SERIAL_ENCODEUTF32BIG","","Serialize to UTF-32 BE (big endian)",null,null],[17,"SERIAL_ENCODEUTF32LITTLE","","Serialize to UTF-32 LE (little endian)",null,null],[17,"ITER_NONE","","No iterator flag",null,null],[17,"ITER_CLASS_MASK","","The low 8 bits are an enum of what data structure to iterate.",null,null],[17,"ITER_PROPERTIES","","Iterate the property tree of a Xmp object.",null,null],[17,"ITER_ALIASES","","Iterate the global alias table.",null,null],[17,"ITER_NAMESPACES","","Iterate the global namespace table.",null,null],[17,"ITER_JUST_CHILDREN","","Just do the immediate children of the root, default is subtree.",null,null],[17,"ITER_JUST_LEAF_NODES","","Just do the leaf nodes, default is all nodes in the subtree.",null,null],[17,"ITER_JUST_LEAF_NAME","","Return just the leaf part of the path, default is the full path.",null,null],[17,"ITER_INCLUDE_ALIASES","","Include aliases, default is justactual properties.",null,null],[17,"ITER_OMIT_QUALIFIERS","","Omit all qualifiers.",null,null],[17,"ITER_SKIP_NONE","","Not flags.",null,null],[17,"ITER_SKIP_SUBTREE","","Skip the subtree below the current node.",null,null],[17,"ITER_SKIP_SIBLINGS","","Skip the subtree below and remaining siblings\nof the current node.",null,null],[11,"new","","",15,{"inputs":[],"output":{"name":"self"}}],[11,"from","","Construct from the native C type",15,{"inputs":[{"name":"xmpdatetime"}],"output":{"name":"datetime"}}],[11,"as_ptr","","Return the native pointer",15,null],[11,"as_mut_ptr","","Return the native mutable pointer",15,null],[11,"eq","","",15,null],[11,"partial_cmp","","",15,null],[11,"cmp","","",15,null],[11,"eq","","",1,null],[11,"eq","","",0,null],[11,"clone","","",1,null],[11,"clone","","",0,null]],"paths":[[4,"FileType"],[4,"Error"],[3,"PropFlags"],[3,"ArrayFlags"],[3,"ItemFlags"],[3,"SerialFlags"],[3,"Xmp"],[3,"XmpString"],[3,"OpenFlags"],[3,"CloseFlags"],[3,"FormatOptionFlags"],[3,"XmpFile"],[3,"IterFlags"],[3,"IterSkipFlags"],[3,"XmpIterator"],[3,"DateTime"]]};
searchIndex["exempi_sys"] = {"doc":"","items":[[3,"XmpDateTime","exempi_sys","",null,null],[12,"year","","",0,null],[12,"month","","",0,null],[12,"day","","",0,null],[12,"hour","","",0,null],[12,"minute","","",0,null],[12,"second","","",0,null],[12,"tz_sign","","",0,null],[12,"tz_hour","","",0,null],[12,"tz_minute","","",0,null],[12,"nano_second","","",0,null],[3,"XmpPacketInfo","","",null,null],[12,"offset","","",1,null],[12,"length","","",1,null],[12,"pad_size","","",1,null],[12,"char_form","","",1,null],[12,"writeable","","",1,null],[12,"has_wrapper","","",1,null],[12,"pad","","",1,null],[4,"Xmp","","",null,null],[4,"XmpFile","","",null,null],[4,"XmpString","","",null,null],[4,"XmpIterator","","",null,null],[4,"XmpError","","XMP errors.",null,null],[13,"Unknown","","Generic unknown error.",2,null],[13,"TBD","","Generic undefined error.",2,null],[13,"Unavailable","","Generic unavailable error.",2,null],[13,"BadObject","","Generic bad object error.",2,null],[13,"BadParam","","Generic bad parameter error.",2,null],[13,"BadValue","","Generic bad value error.",2,null],[13,"AssertFailure","","Generic assertion failure.",2,null],[13,"EnforceFailure","","Generic enforcement failure.",2,null],[13,"Unimplemented","","Generic unimplemented error.",2,null],[13,"InternalFailure","","Generic internal failure.",2,null],[13,"Deprecated","","Generic deprecated error.",2,null],[13,"ExternalFailure","","Generic external failure.",2,null],[13,"UserAbort","","Generic user abort error.",2,null],[13,"StdException","","Generic standard exception.",2,null],[13,"UnknownException","","Generic unknown exception.",2,null],[13,"NoMemory","","Generic out-of-memory error.",2,null],[13,"BadSchema","","Bad schema parameter.",2,null],[13,"BadXPath","","Bad XPath parameter.",2,null],[13,"BadOptions","","Bad options parameter.",2,null],[13,"BadIndex","","Bad index parameter.",2,null],[13,"BadIterPosition","","Bad iteration position.",2,null],[13,"BadParse","","XML parsing error.",2,null],[13,"BadSerialize","","Serialization error.",2,null],[13,"BadFileFormat","","File format error.",2,null],[13,"NoFileHandler","","No file handler found for format.",2,null],[13,"TooLargeForJPEG","","Data too large for JPEG file format.",2,null],[13,"BadXML","","XML format error.",2,null],[13,"BadRDF","","RDF format error.",2,null],[13,"BadXMP","","XMP format error.",2,null],[13,"EmptyIterator","","Empty iterator.",2,null],[13,"BadUnicode","","Unicode error.",2,null],[13,"BadTIFF","","TIFF format error.",2,null],[13,"BadJPEG","","JPEG format error.",2,null],[13,"BadPSD","","PSD format error.",2,null],[13,"BadPSIR","","PSIR format error.",2,null],[13,"BadIPTC","","IPTC format error.",2,null],[13,"BadMPEG","","MPEG format error.",2,null],[4,"TzSign","","",null,null],[13,"West","","West of UTC",3,null],[13,"UTC","","UTC",3,null],[13,"East","","East of UTC",3,null],[4,"FileType","","Public file formats.",null,null],[13,"PDF","","",4,null],[13,"PS","","",4,null],[13,"EPS","","",4,null],[13,"JPEG","","",4,null],[13,"JPEG2K","","",4,null],[13,"TIFF","","",4,null],[13,"GIF","","",4,null],[13,"PNG","","",4,null],[13,"WEBP","","",4,null],[13,"SWF","","",4,null],[13,"FLA","","",4,null],[13,"FLV","","",4,null],[13,"MOV","","",4,null],[13,"AVI","","",4,null],[13,"CIN","","",4,null],[13,"WAV","","",4,null],[13,"MP3","","",4,null],[13,"SES","","",4,null],[13,"CEL","","",4,null],[13,"MPEG","","",4,null],[13,"MPEG2","","",4,null],[13,"MPEG4","","",4,null],[13,"WMAV","","",4,null],[13,"AIFF","","",4,null],[13,"HTML","","",4,null],[13,"XML","","",4,null],[13,"TEXT","","",4,null],[13,"Photoshop","","",4,null],[13,"Illustrator","","",4,null],[13,"InDesign","","",4,null],[13,"AEProject","","",4,null],[13,"AEProjTemplate","","",4,null],[13,"AEFilterPreset","","",4,null],[13,"EncoreProject","","",4,null],[13,"PremiereProject","","",4,null],[13,"PremiereTitle","","",4,null],[13,"UCFFile","","",4,null],[13,"Unknown","","",4,null],[5,"xmp_init","","",null,null],[5,"xmp_terminate","","",null,null],[5,"xmp_get_error","","",null,null],[5,"xmp_files_new","","",null,null],[5,"xmp_files_open_new","","",null,null],[5,"xmp_files_open","","",null,null],[5,"xmp_files_close","","",null,null],[5,"xmp_files_get_new_xmp","","",null,null],[5,"xmp_files_get_xmp","","",null,null],[5,"xmp_files_get_xmp_xmpstring","","",null,null],[5,"xmp_files_can_put_xmp","","",null,null],[5,"xmp_files_can_put_xmp_xmpstring","","",null,null],[5,"xmp_files_can_put_xmp_cstr","","",null,null],[5,"xmp_files_put_xmp","","",null,null],[5,"xmp_files_put_xmp_xmpstring","","",null,null],[5,"xmp_files_put_xmp_cstr","","",null,null],[5,"xmp_files_free","","",null,null],[5,"xmp_files_get_file_info","","",null,null],[5,"xmp_files_check_file_format","","",null,null],[5,"xmp_files_get_format_info","","",null,null],[5,"xmp_register_namespace","","",null,null],[5,"xmp_namespace_prefix","","",null,null],[5,"xmp_prefix_namespace_uri","","",null,null],[5,"xmp_new_empty","","",null,null],[5,"xmp_new","","",null,null],[5,"xmp_copy","","",null,null],[5,"xmp_free","","",null,null],[5,"xmp_parse","","",null,null],[5,"xmp_serialize","","",null,null],[5,"xmp_serialize_and_format","","",null,null],[5,"xmp_get_property","","",null,null],[5,"xmp_get_property_date","","",null,null],[5,"xmp_get_property_float","","",null,null],[5,"xmp_get_property_bool","","",null,null],[5,"xmp_get_property_int32","","",null,null],[5,"xmp_get_property_int64","","",null,null],[5,"xmp_get_array_item","","",null,null],[5,"xmp_set_property","","",null,null],[5,"xmp_set_property_date","","",null,null],[5,"xmp_set_property_float","","",null,null],[5,"xmp_set_property_bool","","",null,null],[5,"xmp_set_property_int32","","",null,null],[5,"xmp_set_property_int64","","",null,null],[5,"xmp_set_array_item","","",null,null],[5,"xmp_append_array_item","","",null,null],[5,"xmp_delete_property","","",null,null],[5,"xmp_has_property","","",null,null],[5,"xmp_get_localized_text","","",null,null],[5,"xmp_set_localized_text","","",null,null],[5,"xmp_delete_localized_text","","",null,null],[5,"xmp_string_new","","",null,null],[5,"xmp_string_free","","",null,null],[5,"xmp_string_cstr","","",null,null],[5,"xmp_string_len","","",null,null],[5,"xmp_iterator_new","","",null,null],[5,"xmp_iterator_free","","",null,null],[5,"xmp_iterator_next","","",null,null],[5,"xmp_iterator_skip","","",null,null],[5,"xmp_datetime_compare","","",null,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",4,null],[11,"eq","","",4,null]],"paths":[[3,"XmpDateTime"],[3,"XmpPacketInfo"],[4,"XmpError"],[4,"TzSign"],[4,"FileType"]]};
initSearch(searchIndex);
